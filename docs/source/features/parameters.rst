Parameters
==========

LAUT supports '%{parameter.x.y.z}' markup in pyATS blitz and hence can autogenerate blitz
action snippets with these markups when any of the commands/entries are passed arguments
containing a LAUT parameter.

Why parameters
--------------

Avoiding harcoding of certain values can make the testcases robust and generic.
To acheive this, markups are used with one of them being the parameter markup.

Basic usage
-----------

'%' is the symbol denoting parameter in LAUT(Remember it as 'p' for percentage as in 'p' for parameter).
Wherever there is a need to hide the values whether it be device name or command argument
or an *include*, *exclude* entry, the syntax '%<PARAMETER_NAME>' will 
add the markup '%{parameters.x.y.z}' to the autogenerated blitz action snippet along with
LAUT interpreting the '%' and invoking the respective command or entry with the value
of the parameter.

<command> <arg1>

INCLUDE> <entry1>

can become

<command> <%name1> where name1 = arg1

INCLUDE> <%name1> where name1 = entry1

With this, blitz can revector the command & include entries to point from name1 = arg1
to name1 = arg2 thereby reusing the abstract script for multiple purposes.

Viewing,creating,deleting,dumping LAUT parameters
-------------------------------------------------

Before using parameters, it's better to know how to create/delete/view LAUT parameters first.

**Create**

In LAUT, parameters could be created in 2 ways:

   1. Import from YAML file via ``parameter import``.
   2. Create using ``parameter create``.

Users can create parameters using ``parameter create`` from the shell itself. Following
example shows a parameter 'intf_name' created and set to the value 'Ethernet0/0':

.. code-block:: console

   (lӓut-leaf2) parameter create intf_name Ethernet0/0
   (lӓut-leaf2)

``parameter create <PARAM_NAME>`` can only accept values that don't have a space in it; To
create parameter values containing spaces wrap them under quotes("). Below is an example
to create a list as parameter:

.. code-block:: console

   (lӓut-leaf2) parameter create devList "['leaf2', 'spine']"
   (lӓut-leaf2)

Finally, ``parameter create`` always does literal evaluation to determine the value of the parameter.
This could mean that passing an argument of 20 would make the parameter contain the integer 20
whereas passing '20' would make the parameter contain the string '20'. This is precisely why in 
the above example, the strings 'leaf2' & 'spine' were wrapped in quotes(')
as without them LAUT would infer them to be undefined object rather than a string.

Alternatively, users can also import parameters from YAML files using ``parameter import``;
see example below:

.. code-block:: console

   (lӓut-leaf2) !cat pyats/parameters.yaml
   parameters:
     a: 2
   (lӓut-leaf2) parameter import pyats/parameters.yaml
   (lӓut-leaf2)

**View**

LAUT parameters can be viewed via the command ``parameter list`` which prints a dictionary
containing all the parameters. An alternative shortcut to this command is the symbol '%' itself.

Below example shows the parameter 'intf_name' being assigned 'Ethernet0/0':

.. code-block:: console

   (lӓut-leaf2) parameter list
   {'intf_name': 'Ethernet0/0'}
   (lӓut-leaf2)
   (lӓut-leaf2) %
   {'intf_name': 'Ethernet0/0'}
   (lӓut-leaf2)

**Delete**

Parameters can be deleted via ``parameter delete`` to declutter the parameter space in LAUT.

See simple example below:

.. code-block:: console

   (lӓut-leaf2) %
   {'intf_name': 'Ethernet0/0'}
   (lӓut-leaf2) parameter delete intf_name
   (lӓut-leaf2) %
   {}
   (lӓut-leaf2)

**Dump**

Finally, at the end of all script autogeneration, users may need to dump all the parameters
into a YAML file in case it is needed for pyATS automation. ``parameter dump`` dumps all
parameters into a YAML file; in case the file exists an error is thrown, to overwrite existing
parameter YAML files use the '-u' option to update the file with the latest parameters.

.. code-block:: console

   (lӓut-leaf2) !cat pyats/parameters.yaml
   parameters:
     intf_name: Ethernet0/0
   (lӓut-leaf2) %
   {'b': 30, 'intf_name': 'Ethernet0/0'}
   (lӓut-leaf2)
   (lӓut-leaf2) parameter dump pyats/parameters.yaml
   LAUT-ERR: File pyats/parameters.yaml exists
   (lӓut-leaf2) parameter dump pyats/parameters.yaml  -u
   (lӓut-leaf2) !cat pyats/parameters.yaml
   parameters:
     b: 30
     intf_name: Ethernet0/0
   (lӓut-leaf2)

Using parameters
----------------

Parameters can be substituted for arguments to commands ``device``, ``execute``, ``configure``, ``api``,
``parse`` & ``replay`` as well in *include*, *exclude* entries for ``execute``, ``api`` &
``parse``.

**device**

An example of a parameter as an argument to ``device`` command:

.. code-block:: console

  (lӓut-leaf2) parameter create dev leaf2
  (lӓut-leaf2) device %dev
  (lӓut~leaf2)

Notice the prompt '-' changed to '~' meaning a parameter has supplied the current device loaded in
the shell. Now, if we try to autogenerate a blitz *'configure'* action snippet we can observe the device
mentioned in the snippet would have the parameter markup:

.. code-block:: console

   (lӓut~leaf2) configure no logging console
   2024-08-06 20:55:15: %LAUT-INFO: +..............................................................................+
   2024-08-06 20:55:15: %LAUT-INFO: :                  Configure 'no logging console' on 'leaf2'                   :
   2024-08-06 20:55:15: %LAUT-INFO: +..............................................................................+
   
   2024-08-06 20:55:15,664: %UNICON-INFO: +++ leaf2 with via 'a': configure +++
   config term
   Enter configuration commands, one per line.  End with CNTL/Z.
   leaf2(config)#no logging console
   leaf2(config)#end
   leaf2#
   (lӓut~leaf2) list 1
   configure:
     device: '%{parameters.dev}'
     command: no logging console
   (lӓut~leaf2)

Parameters could also contain a list of device names highlighting a group of devices subject to a common
operation; in such cases passing this list parameter as an argument to ``device`` command would invoke any
operator command to apply it on multiple devices. Below is an example for the same('$' is necessary here):

.. code-block:: console

   (lӓut-leaf2) parameter create devList "['leaf2', 'spine']"
   (lӓut-leaf2) %
   {'devList': ['leaf2', 'spine']}
   (lӓut-leaf2) 
   (lӓut-leaf2) device $%devList
   (lӓut~leaf2,spine)

Now, applying any operator command would autogenerate blitz action snippet on both the devices with parameter
markups as shown below:

.. code-block:: console

   (lӓut~leaf2,spine) configure no logging console
   2024-08-07 12:07:23: %LAUT-INFO: +------------------------------------------------------------------------------+
   2024-08-07 12:07:23: %LAUT-INFO: :                           Configure loop, length=2                           :
   2024-08-07 12:07:23: %LAUT-INFO: +------------------------------------------------------------------------------+
   2024-08-07 12:07:23: %LAUT-INFO: +..............................................................................+
   2024-08-07 12:07:23: %LAUT-INFO: :                  Configure 'no logging console' on 'leaf2'                   :
   2024-08-07 12:07:23: %LAUT-INFO: +..............................................................................+
   
   2024-08-07 12:07:23,105: %UNICON-INFO: +++ leaf2 with via 'a': configure +++
   config term
   Enter configuration commands, one per line.  End with CNTL/Z.
   leaf2(config)#no logging console
   leaf2(config)#end
   leaf2#
   2024-08-07 12:07:23: %LAUT-INFO: +..............................................................................+
   2024-08-07 12:07:23: %LAUT-INFO: :                  Configure 'no logging console' on 'spine'                   :
   2024-08-07 12:07:23: %LAUT-INFO: +..............................................................................+
   
   2024-08-07 12:07:23,514: %UNICON-INFO: +++ spine with via 'a': configure +++
   config term
   Enter configuration commands, one per line.  End with CNTL/Z.
   spine(config)#no logging console
   spine(config)#end
   spine#
   (lӓut~leaf2,spine) list 2
   configure:
     device: '%{parameters.devList.0}'
     command: no logging console
   configure:
     device: '%{parameters.devList.1}'
     command: no logging console
   (lӓut~leaf2,spine)

**execute**

An example of a parameter as an *include* entry wherein the neighbor address is given as a parameter to
an *include* entry because it can change:

.. code-block:: console

   (lӓut-leaf2) parameter create nbrAddr 1.1.1.1
   (lӓut-leaf2) show ip route -i
   2024-08-07 12:14:59: %LAUT-INFO: +..............................................................................+
   2024-08-07 12:14:59: %LAUT-INFO: :                      Execute 'show ip route' on 'leaf2'                      :
   2024-08-07 12:14:59: %LAUT-INFO: +..............................................................................+
   
   2024-08-07 12:14:59,680: %UNICON-INFO: +++ leaf2 with via 'a': executing command 'show ip route' +++
   show ip route
   Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP
          D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area
          N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
          E1 - OSPF external type 1, E2 - OSPF external type 2, m - OMP
          n - NAT, Ni - NAT inside, No - NAT outside, Nd - NAT DIA
          i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2
          ia - IS-IS inter area, * - candidate default, U - per-user static route
          H - NHRP, G - NHRP registered, g - NHRP registration summary
          o - ODR, P - periodic downloaded static route, l - LISP
          a - application route
          + - replicated route, % - next hop override, p - overrides from PfR
          & - replicated local route overrides by connected
   
   Gateway of last resort is not set
   
         1.0.0.0/32 is subnetted, 1 subnets
   O        1.1.1.1 [110/3] via 20.1.1.1, 20:15:56, GigabitEthernet1/0/1
   leaf2#
   2024-08-07 12:14:59: %LAUT-INFO: +..............................................................................+
   2024-08-07 12:14:59: %LAUT-INFO: :                                   INCLUDE                                    :
   2024-08-07 12:14:59: %LAUT-INFO: +..............................................................................+
   Enter pattern to INCLUDE (Press enter for multiple patterns): %nbrAddr
   (lӓut-leaf2) list 1
   execute:
     device: leaf2
     command: show ip route
     include:
       - '%{parameters.nbrAddr}'
   (lӓut-leaf2)

**parse**

For the same example above, the validation of route to neighbor can be done via ``parse`` by
having an *include* Dq shorthand query "ipv4,default,1.1.1.1", with '1.1.1.1' alone being replaced
with '%nbrAddr' as in "ipv4,default,%nbrAddr":

.. code-block:: console

   (lӓut-leaf2) parse show ip route -i
   2024-08-07 12:18:06: %LAUT-INFO: +..............................................................................+
   2024-08-07 12:18:06: %LAUT-INFO: :                       Parse 'show ip route' on 'leaf2'                       :
   2024-08-07 12:18:06: %LAUT-INFO: +..............................................................................+
   
   2024-08-07 12:18:06,834: %UNICON-INFO: +++ leaf2 with via 'a': executing command 'show ip route' +++
   show ip route
   Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP
          D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area
          N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
          E1 - OSPF external type 1, E2 - OSPF external type 2, m - OMP
          n - NAT, Ni - NAT inside, No - NAT outside, Nd - NAT DIA
          i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2
          ia - IS-IS inter area, * - candidate default, U - per-user static route
          H - NHRP, G - NHRP registered, g - NHRP registration summary
          o - ODR, P - periodic downloaded static route, l - LISP
          a - application route
          + - replicated route, % - next hop override, p - overrides from PfR
          & - replicated local route overrides by connected
   
   Gateway of last resort is not set
   
         1.0.0.0/32 is subnetted, 1 subnets
   O        1.1.1.1 [110/3] via 20.1.1.1, 20:19:03, GigabitEthernet1/0/1
   leaf2#
   2024-08-07 12:18:07: %LAUT-INFO: +..............................................................................+
   2024-08-07 12:18:07: %LAUT-INFO: :                                Parse output:                                 :
   2024-08-07 12:18:07: %LAUT-INFO: +..............................................................................+
                                     {
                                       'vrf': {
                                         'default': {
                                           'address_family': {
                                             'ipv4': {
                                               'routes': {
                                                 '1.1.1.1/32': {
                                                   'route': '1.1.1.1/32'
                                                   'active': True
                                                   'metric': 3
                                                   'route_preference': 110
                                                   'source_protocol_codes': 'O'
                                                   'source_protocol': 'ospf'
                                                   'next_hop': {
                                                     'next_hop_list': {
                                                       1: {
                                                         'index': 1
                                                         'next_hop': '20.1.1.1'
                                                         'updated': '20:19:03'
                                                         'outgoing_interface': 'GigabitEthernet1/0/1'
                                                       }
                                                     }
                                                   }
                                                 }
                                               }
                                             }
                                           }
                                         }
                                       }
                                     }
   2024-08-07 12:18:07: %LAUT-INFO: +..............................................................................+
   2024-08-07 12:18:07: %LAUT-INFO: +..............................................................................+
   2024-08-07 12:18:07: %LAUT-INFO: :                                   INCLUDE                                    :
   2024-08-07 12:18:07: %LAUT-INFO: +..............................................................................+
   𝟏 'vrf':
     𝟐 'default':
       𝟑 'address_family':
         𝟒 'ipv4':
           𝟓 'routes':
             𝟔 '1.1.1.1/32':
               𝟕 'route': '1.1.1.1/32'
               𝟖 'active': True
               𝟗 'metric': 3
               𝟏𝟎 'route_preference': 110
               𝟏𝟏 'source_protocol_codes': 'O'
               𝟏𝟐 'source_protocol': 'ospf'
               𝟏𝟑 'next_hop':
                 𝟏𝟒 'next_hop_list':
                   𝟏𝟓 1:
                     𝟏𝟔 'index': 1
                     𝟏𝟕 'next_hop': '20.1.1.1'
                     𝟏𝟖 'updated': '20:19:03'
                     𝟏𝟗 'outgoing_interface': 'GigabitEthernet1/0/1'
   Enter Dq query (or) line numbers (Press enter for multiple entries): default,ipv4,%nbrAddr
   {'vrf': {'default': {'address_family': {'ipv4': {'routes': {'1.1.1.1/32': {'active': True,
                                                                              'metric': 3,
                                                                              'next_hop': {'next_hop_list': {1: {'index': 1,
                                                                                                                 'next_hop': '20.1.1.1',
                                                                                                                 'outgoing_interface': 'GigabitEthernet1/0/1',
                                                                                                                 'updated': '20:19:03'}}},
                                                                              'route': '1.1.1.1/32',
                                                                              'route_preference': 110,
                                                                              'source_protocol': 'ospf',
                                                                              'source_protocol_codes': 'O'}}}}}}}
   Do you wish to add this Dq query (y/n): y
   (lӓut-leaf2) list 1
   parse:
     device: leaf2
     command: show ip route
     include:
       - contains('default').contains('ipv4').contains('.*%{parameters.nbrAddr}.*', regex=True)
   (lӓut-leaf2)

If, for example, the outgoing interface does too vary, then you can always create a parameter for
the same and have the Dq shorthand query modified like this:

.. code-block:: console

   With Value    : ipv4,default,1.1.1.1,outgoing_interface=GigabitEthernet1/0/1
   With Parameter: ipv4,default,%nbrAddr,outgoing_interface=%nbrIntf

**configure**

Certain configurations can be masked under a parameter allowing them to change dynamically
with changing testbeds or other kinds of scenarios. A simple example for a config masked under 
a parameter 'rpfsync_cfg' because when the testbed changes(to IOL), we would like to make the parameter
an empty string '' to avoid this particular config as it isn't supported.

.. code-block:: console

   (lӓut-leaf2) parameter create rpfsync_cfg "ip multicast redundancy rpf-sync"
   (lӓut-leaf2) %
   {'rpfsync_cfg': 'ip multicast redundancy rpf-sync'}
   (lӓut-leaf2) configure
   (leaf2:config)> %rpfsync_cfg
   (leaf2:config)> end
   (lӓut-leaf2) list 1
   configure:
     device: leaf2
     command: '%{parameters.rpfsync_cfg}'
   (lӓut-leaf2)
 
**api** 

An api parameter could be a LAUT parameter as well as the any of the *include* or *exclude* entries
may contain parameters. Following example illustrate the same:

.. code-block:: console

   (lӓut-host1) parameter create vrf_name red
   (lӓut-host1) parameter create intf_name Loopback99
   (lӓut-host1) %
   {'intf_name': 'Loopback99',
    'vrf_name': 'red'}
   (lӓut-host1)
   (lӓut-host1) api _get_vrf_interface -i
   Gets the subinterfaces for vrf
   
   Args:
       device ('obj'): device to run on
       vrf ('str'): vrf to search under
   
   Returns:
       interfaces('list'): List of interfaces under specified vrf
       None
   
   Raises:
       None
   
   device: [<Device host1 at 0x7fc896de17c0>]
   vrf: %vrf_name
   2024-08-07 14:55:01: %LAUT-INFO: +..............................................................................+
   2024-08-07 14:55:01: %LAUT-INFO: :                   Api 'get_vrf_interface' with parameters:                   :
   2024-08-07 14:55:01: %LAUT-INFO: :                                device: host1                                 :
   2024-08-07 14:55:01: %LAUT-INFO: :                                  vrf: 'red'                                  :
   2024-08-07 14:55:01: %LAUT-INFO: +..............................................................................+
   INFO:genie.libs.sdk.apis.iosxe.vrf.get:Getting the interfaces under vrf red
   
   2024-08-07 14:55:02,214: %UNICON-INFO: +++ host1 with via 'a': executing command 'show vrf red' +++
   show vrf red
     Name                             Default RD            Protocols   Interfaces
     red                              <not set>                         Lo99
   host1#
   2024-08-07 14:55:02: %LAUT-INFO: +..............................................................................+
   2024-08-07 14:55:02: %LAUT-INFO: :                                 Api output:                                  :
   2024-08-07 14:55:02: %LAUT-INFO: +..............................................................................+
                                                                     ['Loopback99']
   2024-08-07 14:55:02: %LAUT-INFO: +..............................................................................+
   2024-08-07 14:55:02: %LAUT-INFO: +..............................................................................+
   2024-08-07 14:55:02: %LAUT-INFO: :                                   INCLUDE                                    :
   2024-08-07 14:55:02: %LAUT-INFO: +..............................................................................+
   Enter elements of the list you would like to INCLUDE (Press enter for multiple entries): %intf_name
   (lӓut-host1) list 1
   api:
     function: get_vrf_interface
     arguments:
       device: host1
       vrf: '%{parameters.vrf_name}'
     include:
       - '%{parameters.intf_name}'
   (lӓut-host1)

Since LAUT parameters are value substituted in backend, in case the value doesn't match the output for an
*include* entry, LAUT always prompts the user whether to add the entry or not as seen below:

.. code-block:: console

   (lӓut-host1) parameter create intf_name Loopback0
   Same path already exists with value, do you want to overwrite (y/n): y
   (lӓut-host1) api _get_vrf_interface -i
   Gets the subinterfaces for vrf
   
   Args:
       device ('obj'): device to run on
       vrf ('str'): vrf to search under
   
   Returns:
       interfaces('list'): List of interfaces under specified vrf
       None
   
   Raises:
       None
   
   device: [<Device host1 at 0x7fc896de17c0>]
   vrf: %vrf_name
   2024-08-07 14:57:05: %LAUT-INFO: +..............................................................................+
   2024-08-07 14:57:05: %LAUT-INFO: :                   Api 'get_vrf_interface' with parameters:                   :
   2024-08-07 14:57:05: %LAUT-INFO: :                                device: host1                                 :
   2024-08-07 14:57:05: %LAUT-INFO: :                                  vrf: 'red'                                  :
   2024-08-07 14:57:05: %LAUT-INFO: +..............................................................................+
   INFO:genie.libs.sdk.apis.iosxe.vrf.get:Getting the interfaces under vrf red
   
   2024-08-07 14:57:06,293: %UNICON-INFO: +++ host1 with via 'a': executing command 'show vrf red' +++
   show vrf red
     Name                             Default RD            Protocols   Interfaces
     red                              <not set>                         Lo99
   host1#
   2024-08-07 14:57:06: %LAUT-INFO: +..............................................................................+
   2024-08-07 14:57:06: %LAUT-INFO: :                                 Api output:                                  :
   2024-08-07 14:57:06: %LAUT-INFO: +..............................................................................+
                                                                     ['Loopback99']
   2024-08-07 14:57:06: %LAUT-INFO: +..............................................................................+
   2024-08-07 14:57:06: %LAUT-INFO: +..............................................................................+
   2024-08-07 14:57:06: %LAUT-INFO: :                                   INCLUDE                                    :
   2024-08-07 14:57:06: %LAUT-INFO: +..............................................................................+
   Enter elements of the list you would like to INCLUDE (Press enter for multiple entries): %intf_name
   Adding this entry would cause this blitz action to fail
   Do you still want to add it (y/n):

**replay**

Any parameter markups inside a saved blitz testcase accesses the LAUT parameter dictionary when it is run
via ``replay`` command. If that parameter can't be found, LAUT prints an error message mentioning the missing parameter.
LAUT does this parameter lookup before the run begins.

A simple example illustrating the same:

.. code-block:: yaml

   # tc.yaml
   # 05 August 2024
   # LAUT Generated testcase
   tc:
     source:
       pkg: genie.libs.sdk
       class: triggers.blitz.blitz.Blitz
     devices:
       - host2
     test_sections:
       - default:
           - execute:
               device: host2
               command: show ip route
               include:
                 - '%{parameters.nbrAddr}'

.. code-block:: console

   (lӓut-host1) %
   {}
   (lӓut-host1) replay pyats/testcases/tc.yaml
   Parameter 'nbrAddr' not found
   (lӓut-host1)

After creating the parameter, ``replay`` runs successfully with the 'nbrAddr' parameter being passed
the value '2.2.2.2'.

.. code-block:: console

   (lӓut-host2) parameter create nbrAddr 2.2.2.2
   (lӓut-host2) replay pyats/testcases/tc.yaml
   2024-08-07 15:01:01: %LAUT-INFO: +------------------------------------------------------------------------------+
   2024-08-07 15:01:01: %LAUT-INFO: :                         Starting run_genie_sdk "tc"                          :
   2024-08-07 15:01:01: %LAUT-INFO: +------------------------------------------------------------------------------+
   2024-08-07 15:01:01: %LAUT-INFO: +------------------------------------------------------------------------------+
   2024-08-07 15:01:01: %LAUT-INFO: :                          Starting section "default"                          :
   2024-08-07 15:01:01: %LAUT-INFO: +------------------------------------------------------------------------------+
   2024-08-07 15:01:01: %LAUT-INFO: +..............................................................................+
   2024-08-07 15:01:01: %LAUT-INFO: :                      Execute 'show ip route' on 'host2'                      :
   2024-08-07 15:01:01: %LAUT-INFO: +..............................................................................+
   
   2024-08-07 15:01:01,716: %UNICON-INFO: +++ host2 with via 'a': executing command 'show ip route' +++
   show ip route
   Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP
          D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area
          N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
          E1 - OSPF external type 1, E2 - OSPF external type 2, m - OMP
          n - NAT, Ni - NAT inside, No - NAT outside, Nd - NAT DIA
          i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2
          ia - IS-IS inter area, * - candidate default, U - per-user static route
          H - NHRP, G - NHRP registered, g - NHRP registration summary
          o - ODR, P - periodic downloaded static route, l - LISP
          a - application route
          + - replicated route, % - next hop override, p - overrides from PfR
          & - replicated local route overrides by connected
   
   Gateway of last resort is not set
   
         2.0.0.0/32 is subnetted, 1 subnets
   C        2.2.2.2 is directly connected, Loopback1
   host2#
   2024-08-07 15:01:01: %LAUT-INFO: +..............................................................................+
   2024-08-07 15:01:01: %LAUT-INFO: :                                   INCLUDE                                    :
   2024-08-07 15:01:01: %LAUT-INFO: +..............................................................................+
   2024-08-07 15:01:01: %LAUT-INFO: :                                '2.2.2.2' matches                             :
   2024-08-07 15:01:01: %LAUT-INFO: +..............................................................................+
   2024-08-07 15:01:01: %LAUT-INFO: +..............................................................................+
   2024-08-07 15:01:01: %LAUT-INFO: :                            run_genie_sdk results                             :
   2024-08-07 15:01:01: %LAUT-INFO: +..............................................................................+
   default:
   2024-08-07 15:01:01: %LAUT-INFO: +------------------------------------------------------------------------------+
   2024-08-07 15:01:01: %LAUT-INFO: :                             run_genie_sdk PASSED                             :
   2024-08-07 15:01:01: %LAUT-INFO: +------------------------------------------------------------------------------+
   (lӓut-host2)
