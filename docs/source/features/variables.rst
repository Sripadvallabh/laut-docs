Variables
=========

LAUT variables work the same way as blitz variables. They could be generated by
saving blitz action outputs and can be passed to command arguments or *include* &
*exclude* entries in the same way as LAUT parameters.

Why variables
-------------

When any command argument or an *include* or *exclude* entry varies dynamically
and can only be determined at runtime, variables are the way to get this value
from one of the blitz action outputs and pass it to another command argument/entry.

Basic usage
-----------

'^' is the symbol denoting parameter in LAUT(Remember it as '^' for inverted 'v' as 'v' in variable)
Wherever there is a need to hide the values whether it be device name or command argument
or an *include*, *exclude* entry, the syntax '^<VARIABLE_NAME>' will 
add the markup '%VARIABLES{x.y.z}' to the autogenerated blitz action snippet along with
LAUT interpreting the '^' and invoking the respective command or entry with the value
of the variable.

<command> <arg1>

INCLUDE> <entry1>

can become

<command> <^name1> where name1 = arg1

INCLUDE> <^name1> where name1 = entry1

Generate variables via *save* entries
-------------------------------------

Variables are generated via *save* entries which could be added by invoking any
of the ``execute``, ``parse`` or ``api`` command with the optional argument '-s'.
Filters can be applied to exactly retrieve the value from generated action outputs.
See below table for available filters.

.. list-table:: Save output information per LAUT command
   :header-rows: 1

   * - LAUT command
     - Output type without filter
     - Available filters
   * - execute
     - str
     - regex, regex_findall
   * - parse
     - dict
     - Dq
   * - api
     - api return type
     - Can be Dq,regex,regex_findall(depending on api return type)

View 'saved' variables via ``variable list`` command similar to ``parameter list``; this command
also has the LAUT shortcut '^' akin to '%' for parameters.

**execute**

Saving an ``execute`` action output will add the entire string output to the variable.
There are regex & regex findall filters available to break down the entire string and get what we need.

Below is an example highlighting the use of regex filter to capture the 'IIF' interface from the 'mroute'
command and check if the same exists in the 'mfib' command output:

.. code-block:: console

   (lӓut-leaf2) show ip mroute 225.1.1.1 3.3.3.3 no-banner -s
   2024-08-09 11:17:29: %LAUT-INFO: +..............................................................................+
   2024-08-09 11:17:29: %LAUT-INFO: :       Execute 'show ip mroute 225.1.1.1 3.3.3.3 no-banner' on 'leaf2'        :
   2024-08-09 11:17:29: %LAUT-INFO: +..............................................................................+
   
   2024-08-09 11:17:29,806: %UNICON-INFO: +++ leaf2 with via 'a': executing command 'show ip mroute 225.1.1.1 3.3.3.3 no-banner' +++
   show ip mroute 225.1.1.1 3.3.3.3 no-banner
   IP Multicast Routing Table at: *05:40:01.511 UTC Fri Aug 9 2024
   
   VRF IPv4 default
   (3.3.3.3, 225.1.1.1), 1d02h/00:02:07, flags: PLFTx
     Incoming interface: Loopback0, RPF nbr 0.0.0.0
     Outgoing interface list: Null
   
   leaf2#
   2024-08-09 11:17:29: %LAUT-INFO: +..............................................................................+
   2024-08-09 11:17:29: %LAUT-INFO: :                                     SAVE                                     :
   2024-08-09 11:17:29: %LAUT-INFO: +..............................................................................+
   Add SAVE filter (y/n): y
   List of available filters:
   1. regex
   2. regex_findall
   Enter filter option number: 1
   Enter regex expression: Incoming interface:\s+(?P<IIF>\w+),
   {'IIF': 'Loopback0'}
   Do you wish to add this regex filter (y/n): y
   (lӓut-leaf2) show ip mfib 225.1.1.1 3.3.3.3 -i
   2024-08-09 11:18:13: %LAUT-INFO: +..............................................................................+
   2024-08-09 11:18:13: %LAUT-INFO: :             Execute 'show ip mfib 225.1.1.1 3.3.3.3' on 'leaf2'              :
   2024-08-09 11:18:13: %LAUT-INFO: +..............................................................................+
   
   2024-08-09 11:18:13,841: %UNICON-INFO: +++ leaf2 with via 'a': executing command 'show ip mfib 225.1.1.1 3.3.3.3' +++
   show ip mfib 225.1.1.1 3.3.3.3
   Entry Flags:    C - Directly Connected, S - Signal, IA - Inherit A flag,
                   ET - Data Rate Exceeds Threshold, K - Keepalive
                   DDE - Data Driven Event, HW - Hardware Installed
                   ME - MoFRR ECMP entry, MNE - MoFRR Non-ECMP entry, MP - MFIB
                   MoFRR Primary, RP - MRIB MoFRR Primary, P - MoFRR Primary
                   MS  - MoFRR  Entry in Sync, MC - MoFRR entry in MoFRR Client,
                   e   - Encap helper tunnel flag.
   I/O Item Flags: IC - Internal Copy, NP - Not platform switched,
                   NS - Negate Signalling, SP - Signal Present,
                   A - Accept, F - Forward, RA - MRIB Accept, RF - MRIB Forward,
                   MA - MFIB Accept, A2 - Accept backup,
                   RA2 - MRIB Accept backup, MA2 - MFIB Accept backup
   
   Forwarding Counts: Pkt Count/Pkts per second/Avg Pkt Size/Kbits per second
   Other counts:      Total/RPF failed/Other drops
   I/O Item Counts:   HW Pkt Count/FS Pkt Count/PS Pkt Count   Egress Rate in pps
   Default
    (3.3.3.3,225.1.1.1) Flags: HW
      SW Forwarding: 0/0/0/0, Other: 118/118/0
      HW Forwarding:   2223/0/206/0, Other: 0/0/0
      Null0 Flags: A
      Loopback0 Flags: IC
   
   leaf2#
   2024-08-09 11:18:14: %LAUT-INFO: +..............................................................................+
   2024-08-09 11:18:14: %LAUT-INFO: :                                   INCLUDE                                    :
   2024-08-09 11:18:14: %LAUT-INFO: +..............................................................................+
   Enter pattern to INCLUDE (Press enter for multiple patterns): ^IIF
   (lӓut-leaf2) list 2
   execute:
     device: leaf2
     command: show ip mroute 225.1.1.1 3.3.3.3 no-banner
     save:
       - filter: Incoming interface:\s+(?P<IIF>\w+),
         regex: true
   execute:
     device: leaf2
     command: show ip mfib 225.1.1.1 3.3.3.3
     include:
       - '%VARIABLES{IIF}'
   (lӓut-leaf2)

The autogenerated blitz action snippet contains the '%VARIABLES{}' markup as seen above.

**parse**

Here is an example where a tunnel interface for a particular multicast group is saved via a Dq filter from the
parsed output of the show command 'show ip igmp groups' and 
is then used as a variable in an *include* entry to another multicast command for its verification.
This was done due to the fact that the
tunnel interface ID is not constant and could contain anything dynamically:

.. code-block:: console

   (lӓut-leaf2) parse show ip igmp groups -s
   2024-08-08 10:46:10: %LAUT-INFO: +..............................................................................+
   2024-08-08 10:46:10: %LAUT-INFO: :                    Parse 'show ip igmp groups' on 'leaf2'                    :
   2024-08-08 10:46:10: %LAUT-INFO: +..............................................................................+
   
   2024-08-08 10:46:10,511: %UNICON-INFO: +++ leaf2 with via 'a': executing command 'show ip igmp groups' +++
   show ip igmp groups
   IGMP Connected Group Membership
   Group Address    Interface                Uptime    Expires   Last Reporter   Group Accounted
   225.2.2.2        Tunnel0                  01:57:09  never     0.0.0.0
   leaf2#
   2024-08-08 10:46:10: %LAUT-INFO: +..............................................................................+
   2024-08-08 10:46:10: %LAUT-INFO: :                                Parse output:                                 :
   2024-08-08 10:46:10: %LAUT-INFO: +..............................................................................+
                                     {
                                       'igmp_groups': {
                                         '225.2.2.2': {
                                           'intf': 'Tunnel0'
                                           'uptime': '01:57:09'
                                           'expires': 'never'
                                           'last_reporter': '0.0.0.0'
                                         }
                                       }
                                     }
   2024-08-08 10:46:10: %LAUT-INFO: +..............................................................................+
   2024-08-08 10:46:10: %LAUT-INFO: +..............................................................................+
   2024-08-08 10:46:10: %LAUT-INFO: :                                     SAVE                                     :
   2024-08-08 10:46:10: %LAUT-INFO: +..............................................................................+
   Add SAVE filter (y/n): y
   List of available filters:
   1. Dq
   Enter filter option number: 1
   Enter Dq query: r([igmp_groups][225.2.2.2][intf])
   'Tunnel0'
   Do you wish to add this Dq query (y/n): y
   Enter variable name to save: intf_name_225_2_2_2
   (lӓut-leaf2) 
   (lӓut-leaf2) ^
   {'intf_name_225_2_2_2': 'Tunnel0'}
   (lӓut-leaf2)

.. code-block:: console

   (lӓut-leaf2) parse show ip mroute 225.2.2.2 -i
   2024-08-08 10:49:17: %LAUT-INFO: +..............................................................................+
   2024-08-08 10:49:17: %LAUT-INFO: :                 Parse 'show ip mroute 225.2.2.2' on 'leaf2'                  :
   2024-08-08 10:49:17: %LAUT-INFO: +..............................................................................+
   
   2024-08-08 10:49:18,222: %UNICON-INFO: +++ leaf2 with via 'a': executing command 'show ip mroute 225.2.2.2' +++
   show ip mroute 225.2.2.2
   IP Multicast Routing Table
   Flags: D - Dense, S - Sparse, B - Bidir Group, s - SSM Group, C - Connected,
          L - Local, P - Pruned, R - RP-bit set, F - Register flag,
          T - SPT-bit set, J - Join SPT, M - MSDP created entry, E - Extranet,
          X - Proxy Join Timer Running, A - Candidate for MSDP Advertisement,
          U - URD, I - Received Source Specific Host Report,
          Z - Multicast Tunnel, z - MDT-data group sender,
          Y - Joined MDT-data group, y - Sending to MDT-data group,
          G - Received BGP C-Mroute, g - Sent BGP C-Mroute,
          N - Received BGP Shared-Tree Prune, n - BGP C-Mroute suppressed,
          Q - Received BGP S-A Route, q - Sent BGP S-A Route,
          V - RD & Vector, v - Vector, p - PIM Joins on route,
          x - VxLAN group, c - PFP-SA cache created entry,
          * - determined by Assert, # - iif-starg configured on rpf intf,
          e - encap-helper tunnel flag, l - LISP decap ref count contributor
   Outgoing interface flags: H - Hardware switched, A - Assert winner, p - PIM Join
                             t - LISP transit group
    Timers: Uptime/Expires
    Interface state: Interface, Next-Hop or VCD, State/Mode
   
   (*, 225.2.2.2), 4d18h/stopped, RP 4.4.4.4, flags: SJCx
     Incoming interface: GigabitEthernet1/0/1, RPF nbr 20.1.1.1
     Outgoing interface list:
       Tunnel0, Forward/Sparse-Dense, 02:00:17/stopped, flags:
   
   leaf2#
   2024-08-08 10:49:18: %LAUT-INFO: +..............................................................................+
   2024-08-08 10:49:18: %LAUT-INFO: :                                Parse output:                                 :
   2024-08-08 10:49:18: %LAUT-INFO: +..............................................................................+
                                     {
                                       'vrf': {
                                         'default': {
                                           'address_family': {
                                             'ipv4': {
                                               'multicast_group': {
                                                 '225.2.2.2': {
                                                   'source_address': {
                                                     '*': {
                                                       'uptime': '4d18h'
                                                       'expire': 'stopped'
                                                       'flags': 'SJCx'
                                                       'msdp_learned': False
                                                       'rp_bit': False
                                                       'rp': '4.4.4.4'
                                                       'rpf_nbr': '20.1.1.1'
                                                       'incoming_interface_list': {
                                                         'GigabitEthernet1/0/1': {
                                                           'rpf_nbr': '20.1.1.1'
                                                         }
                                                       }
                                                       'outgoing_interface_list': {
                                                         'Tunnel0': {
                                                           'uptime': '02:00:17'
                                                           'expire': 'stopped'
                                                           'state_mode': 'forward/sparse-dense'
                                                         }
                                                       }
                                                     }
                                                   }
                                                 }
                                               }
                                             }
                                           }
                                         }
                                       }
                                     }
   2024-08-08 10:49:18: %LAUT-INFO: +..............................................................................+
   2024-08-08 10:49:18: %LAUT-INFO: +..............................................................................+
   2024-08-08 10:49:18: %LAUT-INFO: :                                   INCLUDE                                    :
   2024-08-08 10:49:18: %LAUT-INFO: +..............................................................................+
   𝟏 'vrf':
     𝟐 'default':
       𝟑 'address_family':
         𝟒 'ipv4':
           𝟓 'multicast_group':
             𝟔 '225.2.2.2':
               𝟕 'source_address':
                 𝟖 '*':
                   𝟗 'uptime': '4d18h'
                   𝟏𝟎 'expire': 'stopped'
                   𝟏𝟏 'flags': 'SJCx'
                   𝟏𝟐 'msdp_learned': False
                   𝟏𝟑 'rp_bit': False
                   𝟏𝟒 'rp': '4.4.4.4'
                   𝟏𝟓 'rpf_nbr': '20.1.1.1'
                   𝟏𝟔 'incoming_interface_list':
                     𝟏𝟕 'GigabitEthernet1/0/1':
                       𝟏𝟖 'rpf_nbr': '20.1.1.1'
                   𝟏𝟗 'outgoing_interface_list':
                     𝟐𝟎 'Tunnel0':
                       𝟐𝟏 'uptime': '02:00:17'
                       𝟐𝟐 'expire': 'stopped'
                       𝟐𝟑 'state_mode': 'forward/sparse-dense'
   Enter Dq query (or) line numbers (Press enter for multiple entries): outgoing_interface_list=^intf_name_225_2_2_2
   {'vrf': {'default': {'address_family': {'ipv4': {'multicast_group': {'225.2.2.2': {'source_address': {'*': {'outgoing_interface_list': {'Tunnel0': {'expire': 'stopped',
                                                                                                                                                       'state_mode': 'forward/sparse-dense',
                                                                                                                                                       'uptime': '02:00:17'}}}}}}}}}}}
   Do you wish to add this Dq query (y/n): y
   (lӓut-leaf2) list 1
   parse:
     device: leaf2
     command: show ip mroute 225.2.2.2
     include:
       - contains_key_value('outgoing_interface_list', '.*%VARIABLES{intf_name_225_2_2_2}.*',
         value_regex=True)
   (lӓut-leaf2)

**api**

Depending on the api return type, the available filters may vary. If the return type is 'dict',
Dq filter is available. If the return type is 'str' then regex & regex findall filters are available.
Essentially, the command doesn't matter; only the output type & the filter matters for any *save*
entry.
