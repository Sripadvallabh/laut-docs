configure
=========

Configures a CLI on the device loaded in LAUT shell and autogenerates pyATS
blitz *'configure'* action snippet.

An example where 'no logging console' being configured on device 'l2switch' using ``configure``
& the corresponding autogenerated blitz snippet observed via the command ``list 1``:

.. code-block:: console

   (lӓut-l2switch) configure no logging console
   2024-07-07 13:39:05: %LAUT-INFO: +..............................................................................+
   2024-07-07 13:39:05: %LAUT-INFO: :                  Configure 'no logging console' on 'l2switch'                   :
   2024-07-07 13:39:05: %LAUT-INFO: +..............................................................................+

   2024-07-07 13:39:05,563: %UNICON-INFO: +++ l2switch with via 'cli': configure +++
   config term
   Enter configuration commands, one per line.  End with CNTL/Z.
   l2switch(config)#no logging console
   l2switch(config)#end
   l2switch#
   (lӓut-l2switch)
   (lӓut-l2switch) list 1
               - configure:
                   device: l2switch
                   command: ['no logging console']
   (lӓut-l2switch)

Config application on the device console will always be printed on the terminal screen.

To configure multiple CLI & sub CLI's, type ``configure`` and hit Enter. This enters *'LAUT-cfg'* mode
which mimics config prompt in device. After configuring the required CLI, type 'end' to exit &
return back to LAUT shell prompt.

See example below for a loopback interface configuration done via *'LAUT-cfg'* mode:

.. code-block:: console

   (lӓut-l2switch) configure
   (l2switch:config)> interface Loopback30
   (l2switch:config-if)> ip address 100.100.100.100 255.255.255.255
   (l2switch:config-if)> end
   (lӓut-l2switch)

The corresponding autogenerated blitz *'configure'* action snippet would look like this:

.. code-block:: console

   (lӓut-l2switch) list 1
               - configure:
                   device: l2switch
                   command: |
                       interface Loopback30
                       ip address 100.100.100.100 255.255.255.255
   (lӓut-l2switch)

There is one more way to configure sub CLI's in the command argument itself using '+' as delimiter
between the configs. See example below to configure the same loopback we did before in the command
argument itself:

.. code-block:: console

   (lӓut-l2switch) configure interface Loopback30 + ip address 100.100.100.100 255.255.255.255
   2024-07-09 13:56:56: %LAUT-INFO: +..............................................................................+
   2024-07-09 13:56:56: %LAUT-INFO: : Configure ['interface Loopback30 ', ' ip address 100.100.100.100 255.255.25  :
   2024-07-09 13:56:56: %LAUT-INFO: :                            5.255'] on 'l2switch'                             :
   2024-07-09 13:56:56: %LAUT-INFO: +..............................................................................+

   2024-07-09 13:56:56,754: %UNICON-INFO: +++ l2switch with via 'cli': configure +++
   config term
   Enter configuration commands, one per line.  End with CNTL/Z.
   l2switch(config)#interface Loopback30
   l2switch(config-if)# ip address 100.100.100.100 255.255.255.255
   l2switch(config-if)#end
   l2switch#
   (lӓut-l2switch)
   (lӓut-l2switch) list 1
               - configure:
                   device: l2switch
                   command: [['interface Loopback30 ', ' ip address 100.100.100.100 255.255.255.255']]
