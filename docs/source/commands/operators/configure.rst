configure
=========

Configures a CLI on the device loaded in LAUT shell and autogenerates pyATS
blitz *'configure'* action snippet.

Basic usage
-----------

An example of 'no logging console' being configured on device 'host2' using ``configure``
& its corresponding autogenerated blitz snippet observed via the command ``list 1``:

.. code-block:: console

   (lӓut-host2) configure no logging console
   2024-07-27 13:29:34: %LAUT-INFO: +..............................................................................+
   2024-07-27 13:29:34: %LAUT-INFO: :                  Configure 'no logging console' on 'host2'                   :
   2024-07-27 13:29:34: %LAUT-INFO: +..............................................................................+
   
   2024-07-27 13:29:34,884: %UNICON-INFO: +++ host2 with via 'a': configure +++
   config term
   Enter configuration commands, one per line.  End with CNTL/Z.
   host2(config)#no logging console
   host2(config)#end
   host2#
   (lӓut-host2) list 1
   configure:
     device: host2
     command: no logging console
   (lӓut-host2)

Config application on the device console will always be printed on the terminal screen. Unlike
``execute``, ``configure`` always autogenerates the blitz *'configure'* action snippet.

To configure multiple CLI & sub CLI's, type ``configure`` and hit Enter. This enters *'LAUT-cfg'* mode
which mimics the config prompt in device. After configuring the required CLI, type 'end' to exit &
return back to LAUT shell prompt.

See example below for a loopback interface configuration done via *'LAUT-cfg'* mode:

.. code-block:: console

   (lӓut-host2) configure
   (host2:config)> interface Loopback1
   (host2:config-if)> ip address 1.1.1.1 255.255.255.255
   (host2:config-if)> end
   (lӓut-host2)

The corresponding autogenerated blitz *'configure'* action snippet would look like this:

.. code-block:: console

   (lӓut-host2) list 1
   configure:
     device: host2
     command: |-
       interface Loopback1
       ip address 1.1.1.1 255.255.255.255
   (lӓut-host2)

There is one more way to configure sub CLI's in the command argument itself using '+' as delimiter
between the configs. See example below to configure the same loopback we did before in the command
argument itself:

.. code-block:: console

   (lӓut-host2) configure interface Loopback1 + ip address 1.1.1.1 255.255.255.255
   2024-07-27 13:32:21: %LAUT-INFO: +..............................................................................+
   2024-07-27 13:32:21: %LAUT-INFO: : Configure ['interface Loopback1 ', ' ip address 1.1.1.1 255.255.255.255'] o  :
   2024-07-27 13:32:21: %LAUT-INFO: :                                  n 'host2'                                   :
   2024-07-27 13:32:21: %LAUT-INFO: +..............................................................................+
   
   2024-07-27 13:32:21,783: %UNICON-INFO: +++ host2 with via 'a': configure +++
   config term
   Enter configuration commands, one per line.  End with CNTL/Z.
   host2(config)#interface Loopback1
   host2(config-if)# ip address 1.1.1.1 255.255.255.255
   host2(config-if)#end
   host2#
   (lӓut-host2) list 1
   configure:
     device: host2
     command:
       - 'interface Loopback1 '
       - 'ip address 1.1.1.1 255.255.255.255'
   (lӓut-host2)
